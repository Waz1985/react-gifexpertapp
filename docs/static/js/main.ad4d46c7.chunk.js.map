{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAClC,IADF,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAjBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCNdG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,+DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATjB,kBAadM,GAbc,4CAAH,sDCAPO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OACI,sBAAKc,UAAU,2BAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,GAAcD,GACrC,kCAAMC,EAAN,WCJCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SACxB,ECD0B,SAACA,GAC3B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WAOR,OANAxB,EAAQC,GAAUwB,MAAK,SAACC,GACtBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,OAGN,eACN,CAACpB,IAEGqB,EDf0BK,CAAa1B,GAAjCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACE,qCACE,mCAAMpB,EAAN,OAECoB,GAAW,mBAAGJ,UAAU,iBAAb,wBAEZ,qBAAKA,UAAU,gCAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEcjBgB,EAxBM,WACnB,MAAoCzC,mBAAS,CAAC,KAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAMC,OACC,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BACG2C,EAAWnB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAEEA,SAAUA,GADJA,Y,MCflB6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.ad4d46c7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\r\n    \"\"\r\n  );\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      ></input>\r\n    </form>\r\n  );\r\n};\r\n","\r\n\r\nexport const getGifs = async ( category ) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=uk58QJQNtSUFmSb3lkZ8wAYN5Nr5UhEx`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\r\n    return (\r\n        <div className='card animate__fadeInDown' >\r\n            <img src={ url } alt={ title } key={ id } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data:images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3> {category} </h3>\r\n\r\n      {loading && <p className=\"animate__flash\" >Loading...</p>}\r\n\r\n      <div className=\"card-grid animate__fadeInLeft\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n    return () => {};\r\n  }, [category]);\r\n\r\n  return state; // { data: [], loading: true }\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"\"]);\r\n\r\n  // const handleAdd = () => {\r\n  // setCategories( [...categories, 'HunterXHunter'] )\r\n  //     setCategories( cats => [...cats, 'HunterXHunter'] );\r\n  // }\r\n   return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={ setCategories } />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid \r\n            key={ category }    \r\n            category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}